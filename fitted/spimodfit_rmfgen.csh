#!/bin/csh -f
# Script for RMF generation for use with spimodfit
# Automatically generated by spimodfit version 3.2 on Thu Jul  5 16:20:14 2018


set progname = $0:t

set outRMFfile = "spectral_response"
set inRMFfile  = "$REP_BASE_PROD/ic/spi/rsp/spi_rmf_grp_0002.fits[GROUPING]"

set SrceFiles = ( \
	"spectra_Crab.fits[SPI.-PHA1-SPE]" \
	"spectra_AllSkyModels.fits[SPI.-PHA1-SPE]" \
	"spectra_AllSrces.fits[SPI.-PHA1-SPE]" \
	"spectra_AllModels.fits[SPI.-PHA1-SPE]" \
)


set SpiModFitResults = "results.spimodfit.fits[SPI.-EBDS-SET]" 

while ($#argv > 0) 
   switch ( $argv[1] )
   case "-h":
   case "--help":
      echo
      echo
      echo " NAME"
      echo "      $progname-- (Re)generate RMF file based on spimodfit results"
      echo
      echo
      echo " USAGE" 
      echo "      $progname [-i InputRMF.fits] [-o OutputRMF.fits] "
      echo 
      echo 
      echo " DESCRIPTION"
      echo
      echo " $progname uses spirmf to generate the RMF response corresponding"
      echo "  to an observation processed and rebinned by spimodfit."
      echo " It also updates the appropriate keywords of PHA files"
      echo "  generated by spimodfit, for use with XSPEC." 
      echo 
      echo 
      echo " PARAMETERS"
      echo
      echo
      echo " InputRMF.fits  : [Optionnal] DOL of the input single RMF"
      echo "                  Default = $inRMFfile."
      echo 
      echo " OutputRMF.fits : [Optionnal] Output file ROOT NAME for"
      echo "                  the interpolated RMF. '.rmf.fits' "
      echo "                  will be appended to this name. "
      echo "                  Default = $outRMFfile."
      echo 
      echo
      echo " AUTHOR"
      echo "   H.Halloin (MPE/APC) June 2007"
      echo
      echo

      exit 0

      breaksw

   case "-o":
      if ( $#argv < 2 ) then
         echo 
         echo " Error : Missing output argument (option '-o')"
         echo
         exit 1
      endif

      set outRMFfile=$argv[2]
      shift
      shift

      breaksw

   case "-i":
      if ( $#argv < 2 ) then
        echo 
	echo " Error : Missing input argument (option '-i')"
	echo
	exit 1
      endif

      set inRMFfile=$argv[2]
      shift
      shift
      breaksw

   default:
      echo
      echo " Error : Invalid argument : $argv[1]."
      echo "         Type $argv[1] --help for usage and help."
      echo
      echo

      exit 1

      breaksw

  endsw

end

echo
echo
echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo
echo "    $progname on `date`"
echo "    Generation of an interpolated RMF file   "
echo "     for use with spimodfit                  "
echo
echo
echo " Parameters :"
echo
echo " Input  RMF file = $inRMFfile "
echo " Output RMF file = $outRMFfile.rmf.fits"
echo " spimodfit  file = SpiModFitResults"
echo

# The following instruction avoids problem with brackets []
set nonomatch

# Check parameters file
set SplitPFILES = `echo $PFILES | sed -e 's/:/ /g' | sed -e 's/;/ /g'`
set HasSpirmfPar = 0
set HasFparkeyPar = 0
foreach SPath ($SplitPFILES)
  if ( -e $SPath/spirmf.par ) then
    set HasSpirmfPar = 1
  endif
  if ( -e $SPath/fparkey.par ) then
    set HasFparkeyPar = 1
  endif
end
if ( $HasSpirmfPar == 0 ) then
    echo 
    echo " Error : spirmf.par cannot be found in directories defined by PFILES"
    echo "        Current value of PFILES = $PFILES"
    echo $PFILES | grep "$ISDC_ENV/pfiles"
    if ( $status && -e "$ISDC_ENV/pfiles/spirmf.par" ) then
	echo "        A version of spirmf.par was found in $ISDC_ENV/pfiles"
	echo "        Add this path to PFILES variable [Yes/No] ?"
	
	switch ($<)
	    case [Yy][Ee][Ss]:
		setenv PFILES "${PFILES}:${ISDC_ENV}/pfiles"
		set HasSpirmfPar = 1
	    breaksw
	    
	    case [Nn][Oo]:
		echo "Abort ! "
		echo "Set PFILES to the appropriate directory"
		exit 1
	    breaksw

            default:
		breaksw
	endsw

    endif
endif

if ( $HasFparkeyPar == 0  ) then
    echo 
    echo " Error : fparkey.par cannot be found in directories defined by PFILES"
    echo "        Current value of PFILES = $PFILES"
    echo $PFILES | grep "$HEADAS/syspfiles"
    if ( $status && -e "$HEADAS/syspfiles/fparkey.par" ) then
	echo "        A version of fparkey.par was found in " $HEADAS/syspfiles
	echo "        Add this path to PFILES variable [Yes/No] ?"
	
	switch ($<)
	    case [Yy][Ee][Ss]:
		setenv PFILES "${PFILES}:${HEADAS}/syspfiles"
		set HasFparkeyPar = 1
	    breaksw
	    
	    case [Nn][Oo]:
		echo "Abort ! "
		echo "Set PFILES to the appropriate directory"
		exit 1
	    breaksw

            default:
		breaksw
	endsw
    endif
endif


# Check existing output file 
set clobber="n"
if ( -e "$outRMFfile.rmf.fits" ) then
    echo 
    set ansOK = 0
    while ( $ansOK != 1 )
	echo "$outRMFfile.rmf.fits already exists." 
	echo "Do you want to remove it [Yes/No] ?"

	switch ($<)
	    case [Yy][Ee][Ss]:
		set clobber="y"
		rm -f $outRMFfile.rmf.fits
		set ansOK = 1
	    breaksw
	    
	    case [Nn][Oo]:
		echo "Abort ! "
		echo " Choose another name with the '-o' option"
		set ansOK = 1
		exit 1
	    breaksw

            default:
		breaksw
	endsw
    end
endif


echo 
echo " Generating the RMF with spirmf with : "
set command = `echo "spirmf" \
		"rw-grp-dol=$inRMFfile" \
		"ebounds-dol=$SpiModFitResults" \
		"outfile=$outRMFfile" \
		"single=y" \
		"update=n" \
		"phafile=''" \
		"clobber=$clobber" \
		"chatter=2"`
echo 
echo "   $command"
echo
echo " spirmf output : "
$command
set statusSpiRMF = $status

if ( $statusSpiRMF ) then 
    echo 
    echo " Error during the spirmf process (status = $statusSpiRMF). Abort !"
    echo
    echo
    exit 1
endif

echo " Update ISDCLEVL keywords in $outRMFfile.rmf.fits HDUs : " 
echo "  ------> GROUPING :" 
 fparkey SPE $outRMFfile.rmf.fits[GROUPING] ISDCLEVL add=yes comm="ISDC level of data processing"
echo "  ------> SPI.-RMF.-RSP :" 
 fparkey SPE $outRMFfile.rmf.fits[SPI.-RMF.-RSP] ISDCLEVL add=yes comm="ISDC level of data processing"
echo "  ------> SPI.-EBDS-SET :" 
 fparkey SPE $outRMFfile.rmf.fits[SPI.-EBDS-SET] ISDCLEVL add=yes comm="ISDC level of data processing"

echo

echo
echo "  Update RESPFILE keyword in spectrum files from spimodfit :"
foreach SFile ($SrceFiles)
    echo "     Update $SFile ..."

    fparkey $outRMFfile.rmf.fits $SFile RESPFILE
    set statusFparkey = $status

    if ( $statusFparkey ) then
	    echo 
	    echo " Error while updating keyword with fparkey (status = $statusFparkey). Abort !"
	    echo
	    echo
	    exit 1
    endif

end


echo
echo
echo " $progname exits successfully ! "
echo
echo
echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
